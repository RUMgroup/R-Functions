---
title: "R Functions"
subtitle: "R User Group, University of Manchester"
author: Martin Herrerias Azcue (ResearchIT, UoM)
date: 2023-11-28
format:
  revealjs:
    theme: custom.scss
    scrollable: true
filters:
  - include-code-files
eval: false
---

```{r}
#| eval: true
#| echo: false
rm(list = ls())
```

## Function Syntax

Functions are blocks of code that process input _arguments_ and return some output.

They're different from scripts in that they have their own _environment_, and clearly defined inputs and output.

```{.r include="R/function_syntax.R" filename="R/function_syntax.R" code-line-numbers="false"}
```

## Function Syntax (cont.)

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: false
source("R/function_syntax.R")
result <- multiply(6, 7) # [function call]
result
ls()
```

::: {.callout-note}
- Functions are variables, i.e. variable name rules apply to function names
- The code in the function body runs when the function is _called_, not when it's _sourced_
- Variables inside a function are private (e.g. `a`, `b`, and `answer` exist only inside `multiply`)
:::

```{r}
#| eval: true
#| echo: false
rm(list = ls())
```

## Motivation

After years of research, you've come up with the following script:  

```{.r include="R/bread_script.R" filename="R/bread_script.R" code-line-numbers="true"}
```

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: false
source("R/bread_script.R")
```

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: false
ls()
```


## How NOT to write code variations

```{.r include="R/worst_idea.R" filename="R/worst_idea.R" code-line-numbers="true"}
```
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: false
source("R/worst_idea.R")
```

## Problems

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: false
ls()
```

- Code duplication (errors have to be fixed in multiple places)
- Proliferation of variables (hard to keep using meaningful names)
- Verbosity (hard to grasp the "big picture")

## Better, but not quite there yet

```{.r include="R/parametric_script.R" filename="R/parametric_script.R" code-line-numbers="true"}
```
```{.r include="R/still_bad.R" filename="R/still_bad.R" code-line-numbers="true"}
```

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: false
source("R/still_bad.R")
```

## Problems

- ~~Code duplication~~
- ~~Proliferation of variables~~
- ~~Verbosity~~
- Global variables (hard to track which script changes what)


```{r}
#| eval: true
#| echo: true
#| code-line-numbers: false

# Variable used for something else
water_weight <- 10000

# ... many lines later
source("R/parametric_script.R")
water_weight  # forgot my script also uses `water_weight`
```

## Using a function

```{.r include="R/bread_function.R" filename="R/bread_function.R" code-line-numbers="true"}
```

```{.r include="R/main.R" filename="R/main.R" code-line-numbers="true"}
```
```{r}
#| eval: true
#| echo: true
#| code-line-numbers: false
source("R/main.R")
```

```{r}
#| eval: true
#| echo: true
#| code-line-numbers: false
ls()
```

## Arguments

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: false
# Arguments can be passed by name or position
multiply <- function(a, b) {
  return(a * b)
}
multiply(a = 6, b = 7)
multiply(6, 7)

# No arguments
give_me_five <- function() {
  return(5)
}
give_me_five()

# Unspecified number of arguments
printer <- function(...) {
  cat("arguments:", ..., "\n")
}
printer(1, 2, "testing")
```

## Arguments (defaults)
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: false
# Default arguments
raise_to_power <- function(base, exponent = 2) {
  return(base^exponent)
}
raise_to_power(base = 3)
raise_to_power(base = 3, exponent = 3)

# Defaults can use any previous arguments
box <- function(a, b = a, c = b) {
  return(a * b * c)
}
box(2)
box(2, 3)
```

## Return values

#### `return` is optional
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: false
# without explicit `return`, the last expression is returned
multiply <- function(a, b) {
  a * b
}
multiply(6, 7)

# (this can easily lead to errors)
surprise <- function(a, b) {
  result <- a * b
  cat("The answer is", result, "\n")
}
answer <- surprise(6, 7)
answer

# better...
no_surprise <- function(a, b) {
  result <- a * b
  cat("The answer is", result, "\n")
  return(result)
}
answer <- no_surprise(6, 7)
answer
```

## Multiple return values
```{r}
#| echo: true
#| eval: true
#| code-line-numbers: false
# use a named list for multiple return values
rectangle <- function(a, b) {

    area <- a * b
    perimeter <- 2 * (a + b)

    list(area = area, perimeter = perimeter)
}
result = rectangle(2, 3)
result$area
result$perimeter
```

See also the [`zeallot`](https://cran.r-project.org/web/packages/zeallot/vignettes/unpacking-assignment.html) package, and `base::list2env`.

## Environments

- Variables inside a function are private
- The same name can be used for different things inside and outside

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: false

rm(list = ls())

print_vars <- function(a, b) {
  cat("a =", a, "b =", b, "\n")
}

b <- 1000
print_vars(a = 2, b = 3)
b
```

## Environments (cont.)

- Variables outside can (but **shouldn't!**) be viewed from inside
- Variables outside can (but **shouldn't!**) be modified from inside

```{r}
#| echo: true
#| eval: true
#| code-line-numbers: false

rm(list = ls())

bad_example <- function(x = 1) {

  cat("variables inside:", ls(), "\n")

  # search in parent environments (AVOID!)
  cat("outside_c = ", outside_c, "\n") 

  # assignment in parent environment (AVOID!)
  outside_d <<- 42 
}

outside_c <- 2
outside_d <- 3
bad_example()
outside_d
```

## Documentation

Describe what the function does, each of the arguments, and the return value.

You might want to use [roxygen2](https://r-pkgs.org/man.html#roxygen2-basics) style comments.

```{r, filename="R/bread_function.R"}
#| echo: true

#' Calculates bread weight
#'
#' @param flour_weight Weight of flour in kg
#' @param hydration Water content per unit flour [0, 1]
#' @param water_loss Water loss fraction during baking [0, 1]
#' @return Weight of baked bread in kg
#' @export
get_bread_weight <- function(flour_weight,
                             hydration = 0.7,
                             water_loss = 0.1) {
    # ...
}
```

## Final notes

#### Advantages of functions

Reusability, Parametrization, Readability, Maintainability, Encapsulation, ...

Modularity, Collaboration, [Testing](https://r-pkgs.org/testing-basics.html), Debugging (`base::debugonce`).


#### Where to go next

- Functions Chapter on [R4DS **1st ed.**](https://r4ds.had.co.nz/functions.html)
- Functions / Environments in [Advanced R](https://adv-r.hadley.nz/functions.html)

